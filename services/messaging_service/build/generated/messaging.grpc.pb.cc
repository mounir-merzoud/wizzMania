// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messaging.proto

#include "messaging.pb.h"
#include "messaging.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace securecloud {
namespace messaging {

static const char* MessagingService_method_names[] = {
  "/securecloud.messaging.MessagingService/SendMessage",
  "/securecloud.messaging.MessagingService/GetHistory",
  "/securecloud.messaging.MessagingService/ChatStream",
};

std::unique_ptr< MessagingService::Stub> MessagingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessagingService::Stub> stub(new MessagingService::Stub(channel, options));
  return stub;
}

MessagingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(MessagingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHistory_(MessagingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChatStream_(MessagingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status MessagingService::Stub::SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::securecloud::messaging::SendAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>* MessagingService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::securecloud::messaging::SendAck, ::securecloud::messaging::EncryptedMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>* MessagingService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::securecloud::messaging::HistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHistory_, context, request, response);
}

void MessagingService::Stub::async::GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHistory_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>* MessagingService::Stub::PrepareAsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::securecloud::messaging::HistoryResponse, ::securecloud::messaging::HistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>* MessagingService::Stub::AsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* MessagingService::Stub::ChatStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>::Create(channel_.get(), rpcmethod_ChatStream_, context);
}

void MessagingService::Stub::async::ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::securecloud::messaging::EncryptedMessage,::securecloud::messaging::EncryptedMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::securecloud::messaging::EncryptedMessage,::securecloud::messaging::EncryptedMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ChatStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* MessagingService::Stub::AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>::Create(channel_.get(), cq, rpcmethod_ChatStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* MessagingService::Stub::PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>::Create(channel_.get(), cq, rpcmethod_ChatStream_, context, false, nullptr);
}

MessagingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::securecloud::messaging::EncryptedMessage* req,
             ::securecloud::messaging::SendAck* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::securecloud::messaging::HistoryRequest* req,
             ::securecloud::messaging::HistoryResponse* resp) {
               return service->GetHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MessagingService::Service, ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::securecloud::messaging::EncryptedMessage,
             ::securecloud::messaging::EncryptedMessage>* stream) {
               return service->ChatStream(ctx, stream);
             }, this)));
}

MessagingService::Service::~Service() {
}

::grpc::Status MessagingService::Service::SendMessage(::grpc::ServerContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::GetHistory(::grpc::ServerContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::ChatStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace securecloud
}  // namespace messaging
#include <grpcpp/ports_undef.inc>

