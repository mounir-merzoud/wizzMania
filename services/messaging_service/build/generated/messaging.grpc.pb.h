// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messaging.proto
#ifndef GRPC_messaging_2eproto__INCLUDED
#define GRPC_messaging_2eproto__INCLUDED

#include "messaging.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace securecloud {
namespace messaging {

class MessagingService final {
 public:
  static constexpr char const* service_full_name() {
    return "securecloud.messaging.MessagingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Envoi d’un message (push simple)
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::securecloud::messaging::SendAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>> AsyncSendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    // Récupération historique
    virtual ::grpc::Status GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::securecloud::messaging::HistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>> AsyncGetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>>(AsyncGetHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>> PrepareAsyncGetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>>(PrepareAsyncGetHistoryRaw(context, request, cq));
    }
    // Stream bidirectionnel temps réel
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> ChatStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(ChatStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> AsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(AsyncChatStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> PrepareAsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(PrepareAsyncChatStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Envoi d’un message (push simple)
      virtual void SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Récupération historique
      virtual void GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream bidirectionnel temps réel
      virtual void ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::securecloud::messaging::EncryptedMessage,::securecloud::messaging::EncryptedMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::SendAck>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>* AsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::securecloud::messaging::HistoryResponse>* PrepareAsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* ChatStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::securecloud::messaging::SendAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>> AsyncSendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::securecloud::messaging::HistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>> AsyncGetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>>(AsyncGetHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>> PrepareAsyncGetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>>(PrepareAsyncGetHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> ChatStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(ChatStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> AsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(AsyncChatStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>> PrepareAsyncChatStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>>(PrepareAsyncChatStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHistory(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChatStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::securecloud::messaging::EncryptedMessage,::securecloud::messaging::EncryptedMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::SendAck>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::securecloud::messaging::EncryptedMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>* AsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::securecloud::messaging::HistoryResponse>* PrepareAsyncGetHistoryRaw(::grpc::ClientContext* context, const ::securecloud::messaging::HistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* ChatStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* AsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* PrepareAsyncChatStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_ChatStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Envoi d’un message (push simple)
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response);
    // Récupération historique
    virtual ::grpc::Status GetHistory(::grpc::ServerContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response);
    // Stream bidirectionnel temps réel
    virtual ::grpc::Status ChatStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::securecloud::messaging::EncryptedMessage* request, ::grpc::ServerAsyncResponseWriter< ::securecloud::messaging::SendAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHistory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHistory(::grpc::ServerContext* context, ::securecloud::messaging::HistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::securecloud::messaging::HistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChatStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_GetHistory<WithAsyncMethod_ChatStream<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::securecloud::messaging::EncryptedMessage* request, ::securecloud::messaging::SendAck* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHistory() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::securecloud::messaging::HistoryRequest* request, ::securecloud::messaging::HistoryResponse* response) { return this->GetHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetHistory(
        ::grpc::MessageAllocator< ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChatStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChatStream(context); }));
    }
    ~WithCallbackMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* ChatStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessage<WithCallbackMethod_GetHistory<WithCallbackMethod_ChatStream<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHistory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChatStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHistory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChatStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHistory() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChatStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ChatStream(context); }));
    }
    ~WithRawCallbackMethod_ChatStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::EncryptedMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ChatStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::securecloud::messaging::EncryptedMessage, ::securecloud::messaging::SendAck>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::EncryptedMessage* /*request*/, ::securecloud::messaging::SendAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::securecloud::messaging::EncryptedMessage,::securecloud::messaging::SendAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHistory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::securecloud::messaging::HistoryRequest, ::securecloud::messaging::HistoryResponse>* streamer) {
                       return this->StreamedGetHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHistory(::grpc::ServerContext* /*context*/, const ::securecloud::messaging::HistoryRequest* /*request*/, ::securecloud::messaging::HistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::securecloud::messaging::HistoryRequest,::securecloud::messaging::HistoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetHistory<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetHistory<Service > > StreamedService;
};

}  // namespace messaging
}  // namespace securecloud


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_messaging_2eproto__INCLUDED
