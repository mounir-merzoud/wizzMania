// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messaging.proto
// Protobuf C++ Version: 6.32.1

#ifndef messaging_2eproto_2epb_2eh
#define messaging_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messaging_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messaging_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_messaging_2eproto;
}  // extern "C"
namespace securecloud {
namespace messaging {
class EncryptedMessage;
struct EncryptedMessageDefaultTypeInternal;
extern EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull EncryptedMessage_class_data_;
class HistoryRequest;
struct HistoryRequestDefaultTypeInternal;
extern HistoryRequestDefaultTypeInternal _HistoryRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HistoryRequest_class_data_;
class HistoryResponse;
struct HistoryResponseDefaultTypeInternal;
extern HistoryResponseDefaultTypeInternal _HistoryResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HistoryResponse_class_data_;
class SendAck;
struct SendAckDefaultTypeInternal;
extern SendAckDefaultTypeInternal _SendAck_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SendAck_class_data_;
}  // namespace messaging
}  // namespace securecloud
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace securecloud {
namespace messaging {

// ===================================================================


// -------------------------------------------------------------------

class SendAck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:securecloud.messaging.SendAck) */ {
 public:
  inline SendAck() : SendAck(nullptr) {}
  ~SendAck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendAck* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendAck(::google::protobuf::internal::ConstantInitialized);

  inline SendAck(const SendAck& from) : SendAck(nullptr, from) {}
  inline SendAck(SendAck&& from) noexcept
      : SendAck(nullptr, ::std::move(from)) {}
  inline SendAck& operator=(const SendAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendAck& operator=(SendAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendAck& default_instance() {
    return *reinterpret_cast<const SendAck*>(
        &_SendAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SendAck& a, SendAck& b) { a.Swap(&b); }
  inline void Swap(SendAck* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendAck* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendAck* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendAck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendAck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendAck& from) { SendAck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendAck* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "securecloud.messaging.SendAck"; }

 protected:
  explicit SendAck(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SendAck(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SendAck& from);
  SendAck(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SendAck&& from) noexcept
      : SendAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kAcceptedFieldNumber = 2,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const ::std::string& message_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_message_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_message_id();
  void set_allocated_message_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_message_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_message_id();

  public:
  // bool accepted = 2;
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:securecloud.messaging.SendAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 48,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SendAck& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    bool accepted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messaging_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SendAck_class_data_;
// -------------------------------------------------------------------

class HistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:securecloud.messaging.HistoryRequest) */ {
 public:
  inline HistoryRequest() : HistoryRequest(nullptr) {}
  ~HistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistoryRequest* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistoryRequest(::google::protobuf::internal::ConstantInitialized);

  inline HistoryRequest(const HistoryRequest& from) : HistoryRequest(nullptr, from) {}
  inline HistoryRequest(HistoryRequest&& from) noexcept
      : HistoryRequest(nullptr, ::std::move(from)) {}
  inline HistoryRequest& operator=(const HistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRequest& operator=(HistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryRequest& default_instance() {
    return *reinterpret_cast<const HistoryRequest*>(
        &_HistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(HistoryRequest& a, HistoryRequest& b) { a.Swap(&b); }
  inline void Swap(HistoryRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistoryRequest& from) { HistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistoryRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "securecloud.messaging.HistoryRequest"; }

 protected:
  explicit HistoryRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HistoryRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HistoryRequest& from);
  HistoryRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HistoryRequest&& from) noexcept
      : HistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const ::std::string& conversation_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_conversation_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_conversation_id();
  void set_allocated_conversation_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_conversation_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_conversation_id();

  public:
  // int32 limit = 2;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securecloud.messaging.HistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 60,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HistoryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messaging_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HistoryRequest_class_data_;
// -------------------------------------------------------------------

class EncryptedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:securecloud.messaging.EncryptedMessage) */ {
 public:
  inline EncryptedMessage() : EncryptedMessage(nullptr) {}
  ~EncryptedMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EncryptedMessage* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EncryptedMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EncryptedMessage(::google::protobuf::internal::ConstantInitialized);

  inline EncryptedMessage(const EncryptedMessage& from) : EncryptedMessage(nullptr, from) {}
  inline EncryptedMessage(EncryptedMessage&& from) noexcept
      : EncryptedMessage(nullptr, ::std::move(from)) {}
  inline EncryptedMessage& operator=(const EncryptedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedMessage& operator=(EncryptedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedMessage& default_instance() {
    return *reinterpret_cast<const EncryptedMessage*>(
        &_EncryptedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EncryptedMessage& a, EncryptedMessage& b) { a.Swap(&b); }
  inline void Swap(EncryptedMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedMessage* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EncryptedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EncryptedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EncryptedMessage& from) { EncryptedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EncryptedMessage* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "securecloud.messaging.EncryptedMessage"; }

 protected:
  explicit EncryptedMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EncryptedMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EncryptedMessage& from);
  EncryptedMessage(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EncryptedMessage&& from) noexcept
      : EncryptedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kConversationIdFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kCiphertextFieldNumber = 4,
    kNonceFieldNumber = 5,
    kTimestampUnixFieldNumber = 6,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const ::std::string& message_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_message_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_message_id();
  void set_allocated_message_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_message_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_message_id();

  public:
  // string conversation_id = 2;
  void clear_conversation_id() ;
  const ::std::string& conversation_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_conversation_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_conversation_id();
  void set_allocated_conversation_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_conversation_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_conversation_id();

  public:
  // string sender_id = 3;
  void clear_sender_id() ;
  const ::std::string& sender_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_sender_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_sender_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_sender_id();
  void set_allocated_sender_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_sender_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_sender_id();

  public:
  // bytes ciphertext = 4;
  void clear_ciphertext() ;
  const ::std::string& ciphertext() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_ciphertext(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_ciphertext();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_ciphertext();
  void set_allocated_ciphertext(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_ciphertext() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ciphertext(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_ciphertext();

  public:
  // bytes nonce = 5;
  void clear_nonce() ;
  const ::std::string& nonce() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_nonce();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_nonce();
  void set_allocated_nonce(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_nonce() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_nonce();

  public:
  // int64 timestamp_unix = 6;
  void clear_timestamp_unix() ;
  ::int64_t timestamp_unix() const;
  void set_timestamp_unix(::int64_t value);

  private:
  ::int64_t _internal_timestamp_unix() const;
  void _internal_set_timestamp_unix(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:securecloud.messaging.EncryptedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 81,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EncryptedMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr sender_id_;
    ::google::protobuf::internal::ArenaStringPtr ciphertext_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::int64_t timestamp_unix_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messaging_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull EncryptedMessage_class_data_;
// -------------------------------------------------------------------

class HistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:securecloud.messaging.HistoryResponse) */ {
 public:
  inline HistoryResponse() : HistoryResponse(nullptr) {}
  ~HistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistoryResponse* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistoryResponse(::google::protobuf::internal::ConstantInitialized);

  inline HistoryResponse(const HistoryResponse& from) : HistoryResponse(nullptr, from) {}
  inline HistoryResponse(HistoryResponse&& from) noexcept
      : HistoryResponse(nullptr, ::std::move(from)) {}
  inline HistoryResponse& operator=(const HistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryResponse& operator=(HistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryResponse& default_instance() {
    return *reinterpret_cast<const HistoryResponse*>(
        &_HistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(HistoryResponse& a, HistoryResponse& b) { a.Swap(&b); }
  inline void Swap(HistoryResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistoryResponse& from) { HistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistoryResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "securecloud.messaging.HistoryResponse"; }

 protected:
  explicit HistoryResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HistoryResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HistoryResponse& from);
  HistoryResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HistoryResponse&& from) noexcept
      : HistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .securecloud.messaging.EncryptedMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::securecloud::messaging::EncryptedMessage* PROTOBUF_NONNULL mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>* PROTOBUF_NONNULL mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>* PROTOBUF_NONNULL _internal_mutable_messages();
  public:
  const ::securecloud::messaging::EncryptedMessage& messages(int index) const;
  ::securecloud::messaging::EncryptedMessage* PROTOBUF_NONNULL add_messages();
  const ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>& messages() const;
  // @@protoc_insertion_point(class_scope:securecloud.messaging.HistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HistoryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::securecloud::messaging::EncryptedMessage > messages_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messaging_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HistoryResponse_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EncryptedMessage

// string message_id = 1;
inline void EncryptedMessage::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& EncryptedMessage::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncryptedMessage::set_message_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.message_id)
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::mutable_message_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.EncryptedMessage.message_id)
  return _s;
}
inline const ::std::string& EncryptedMessage::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void EncryptedMessage::_internal_set_message_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.message_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EncryptedMessage::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.EncryptedMessage.message_id)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.message_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_id_.Set("", GetArena());
  }
  return released;
}
inline void EncryptedMessage::set_allocated_message_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.EncryptedMessage.message_id)
}

// string conversation_id = 2;
inline void EncryptedMessage::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline const ::std::string& EncryptedMessage::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncryptedMessage::set_conversation_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.conversation_id)
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::mutable_conversation_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.EncryptedMessage.conversation_id)
  return _s;
}
inline const ::std::string& EncryptedMessage::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void EncryptedMessage::_internal_set_conversation_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  _impl_.conversation_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002U;
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EncryptedMessage::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.EncryptedMessage.conversation_id)
  if ((_impl_._has_bits_[0] & 0x00000002U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002U;
  auto* released = _impl_.conversation_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  return released;
}
inline void EncryptedMessage::set_allocated_conversation_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002U;
  }
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.EncryptedMessage.conversation_id)
}

// string sender_id = 3;
inline void EncryptedMessage::clear_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline const ::std::string& EncryptedMessage::sender_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.sender_id)
  return _internal_sender_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncryptedMessage::set_sender_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.sender_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.sender_id)
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::mutable_sender_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.EncryptedMessage.sender_id)
  return _s;
}
inline const ::std::string& EncryptedMessage::_internal_sender_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_id_.Get();
}
inline void EncryptedMessage::_internal_set_sender_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  _impl_.sender_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::_internal_mutable_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004U;
  return _impl_.sender_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EncryptedMessage::release_sender_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.EncryptedMessage.sender_id)
  if ((_impl_._has_bits_[0] & 0x00000004U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004U;
  auto* released = _impl_.sender_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  return released;
}
inline void EncryptedMessage::set_allocated_sender_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004U;
  }
  _impl_.sender_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.EncryptedMessage.sender_id)
}

// bytes ciphertext = 4;
inline void EncryptedMessage::clear_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ciphertext_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline const ::std::string& EncryptedMessage::ciphertext() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.ciphertext)
  return _internal_ciphertext();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncryptedMessage::set_ciphertext(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.ciphertext_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.ciphertext)
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::mutable_ciphertext()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_ciphertext();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.EncryptedMessage.ciphertext)
  return _s;
}
inline const ::std::string& EncryptedMessage::_internal_ciphertext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ciphertext_.Get();
}
inline void EncryptedMessage::_internal_set_ciphertext(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  _impl_.ciphertext_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::_internal_mutable_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008U;
  return _impl_.ciphertext_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EncryptedMessage::release_ciphertext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.EncryptedMessage.ciphertext)
  if ((_impl_._has_bits_[0] & 0x00000008U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008U;
  auto* released = _impl_.ciphertext_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ciphertext_.Set("", GetArena());
  }
  return released;
}
inline void EncryptedMessage::set_allocated_ciphertext(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008U;
  }
  _impl_.ciphertext_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ciphertext_.IsDefault()) {
    _impl_.ciphertext_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.EncryptedMessage.ciphertext)
}

// bytes nonce = 5;
inline void EncryptedMessage::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline const ::std::string& EncryptedMessage::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EncryptedMessage::set_nonce(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.nonce_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.nonce)
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::mutable_nonce()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.EncryptedMessage.nonce)
  return _s;
}
inline const ::std::string& EncryptedMessage::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void EncryptedMessage::_internal_set_nonce(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  _impl_.nonce_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EncryptedMessage::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010U;
  return _impl_.nonce_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EncryptedMessage::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.EncryptedMessage.nonce)
  if ((_impl_._has_bits_[0] & 0x00000010U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010U;
  auto* released = _impl_.nonce_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.nonce_.Set("", GetArena());
  }
  return released;
}
inline void EncryptedMessage::set_allocated_nonce(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010U;
  }
  _impl_.nonce_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nonce_.IsDefault()) {
    _impl_.nonce_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.EncryptedMessage.nonce)
}

// int64 timestamp_unix = 6;
inline void EncryptedMessage::clear_timestamp_unix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_unix_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline ::int64_t EncryptedMessage::timestamp_unix() const {
  // @@protoc_insertion_point(field_get:securecloud.messaging.EncryptedMessage.timestamp_unix)
  return _internal_timestamp_unix();
}
inline void EncryptedMessage::set_timestamp_unix(::int64_t value) {
  _internal_set_timestamp_unix(value);
  _impl_._has_bits_[0] |= 0x00000020U;
  // @@protoc_insertion_point(field_set:securecloud.messaging.EncryptedMessage.timestamp_unix)
}
inline ::int64_t EncryptedMessage::_internal_timestamp_unix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_unix_;
}
inline void EncryptedMessage::_internal_set_timestamp_unix(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_unix_ = value;
}

// -------------------------------------------------------------------

// SendAck

// string message_id = 1;
inline void SendAck::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& SendAck::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.SendAck.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SendAck::set_message_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.SendAck.message_id)
}
inline ::std::string* PROTOBUF_NONNULL SendAck::mutable_message_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.SendAck.message_id)
  return _s;
}
inline const ::std::string& SendAck::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void SendAck::_internal_set_message_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.message_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SendAck::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.message_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SendAck::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.SendAck.message_id)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.message_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_id_.Set("", GetArena());
  }
  return released;
}
inline void SendAck::set_allocated_message_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.SendAck.message_id)
}

// bool accepted = 2;
inline void SendAck::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline bool SendAck::accepted() const {
  // @@protoc_insertion_point(field_get:securecloud.messaging.SendAck.accepted)
  return _internal_accepted();
}
inline void SendAck::set_accepted(bool value) {
  _internal_set_accepted(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:securecloud.messaging.SendAck.accepted)
}
inline bool SendAck::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void SendAck::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

// -------------------------------------------------------------------

// HistoryRequest

// string conversation_id = 1;
inline void HistoryRequest::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& HistoryRequest::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.HistoryRequest.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void HistoryRequest::set_conversation_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:securecloud.messaging.HistoryRequest.conversation_id)
}
inline ::std::string* PROTOBUF_NONNULL HistoryRequest::mutable_conversation_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.HistoryRequest.conversation_id)
  return _s;
}
inline const ::std::string& HistoryRequest::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void HistoryRequest::_internal_set_conversation_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.conversation_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL HistoryRequest::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE HistoryRequest::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:securecloud.messaging.HistoryRequest.conversation_id)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.conversation_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  return released;
}
inline void HistoryRequest::set_allocated_conversation_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:securecloud.messaging.HistoryRequest.conversation_id)
}

// int32 limit = 2;
inline void HistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::int32_t HistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:securecloud.messaging.HistoryRequest.limit)
  return _internal_limit();
}
inline void HistoryRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:securecloud.messaging.HistoryRequest.limit)
}
inline ::int32_t HistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void HistoryRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// HistoryResponse

// repeated .securecloud.messaging.EncryptedMessage messages = 1;
inline int HistoryResponse::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int HistoryResponse::messages_size() const {
  return _internal_messages_size();
}
inline void HistoryResponse::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::securecloud::messaging::EncryptedMessage* PROTOBUF_NONNULL HistoryResponse::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:securecloud.messaging.HistoryResponse.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>* PROTOBUF_NONNULL HistoryResponse::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:securecloud.messaging.HistoryResponse.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::securecloud::messaging::EncryptedMessage& HistoryResponse::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:securecloud.messaging.HistoryResponse.messages)
  return _internal_messages().Get(index);
}
inline ::securecloud::messaging::EncryptedMessage* PROTOBUF_NONNULL HistoryResponse::add_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::securecloud::messaging::EncryptedMessage* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:securecloud.messaging.HistoryResponse.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>& HistoryResponse::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:securecloud.messaging.HistoryResponse.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>&
HistoryResponse::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::securecloud::messaging::EncryptedMessage>* PROTOBUF_NONNULL
HistoryResponse::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
}  // namespace securecloud


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // messaging_2eproto_2epb_2eh
